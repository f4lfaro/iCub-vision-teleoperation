/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <hde/msgs/Quaternion.h>

namespace hde::msgs {

// Constructor with field values
Quaternion::Quaternion(const double w,
                       const Vector3& imaginary) :
        WirePortable(),
        w(w),
        imaginary(imaginary)
{
}

// Read structure on a Wire
bool Quaternion::read(yarp::os::idl::WireReader& reader)
{
    if (!read_w(reader)) {
        return false;
    }
    if (!read_imaginary(reader)) {
        return false;
    }
    if (reader.isError()) {
        return false;
    }
    return true;
}

// Read structure on a Connection
bool Quaternion::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(4)) {
        return false;
    }
    if (!read(reader)) {
        return false;
    }
    return true;
}

// Write structure on a Wire
bool Quaternion::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_w(writer)) {
        return false;
    }
    if (!write_imaginary(writer)) {
        return false;
    }
    if (writer.isError()) {
        return false;
    }
    return true;
}

// Write structure on a Connection
bool Quaternion::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(4)) {
        return false;
    }
    if (!write(writer)) {
        return false;
    }
    return true;
}

// Convert to a printable string
std::string Quaternion::toString() const
{
    yarp::os::Bottle b;
    if (!yarp::os::Portable::copyPortable(*this, b)) {
        return {};
    }
    return b.toString();
}

// read w field
bool Quaternion::read_w(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(w)) {
        reader.fail();
        return false;
    }
    return true;
}

// write w field
bool Quaternion::write_w(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(w)) {
        return false;
    }
    return true;
}

// read (nested) w field
bool Quaternion::nested_read_w(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readFloat64(w)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) w field
bool Quaternion::nested_write_w(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeFloat64(w)) {
        return false;
    }
    return true;
}

// read imaginary field
bool Quaternion::read_imaginary(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(imaginary)) {
        reader.fail();
        return false;
    }
    return true;
}

// write imaginary field
bool Quaternion::write_imaginary(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(imaginary)) {
        return false;
    }
    return true;
}

// read (nested) imaginary field
bool Quaternion::nested_read_imaginary(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(imaginary)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) imaginary field
bool Quaternion::nested_write_imaginary(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(imaginary)) {
        return false;
    }
    return true;
}

} // namespace hde::msgs
