/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <hde/msgs/HumanState.h>

namespace hde::msgs {

// Constructor with field values
HumanState::HumanState(const std::vector<std::string>& jointNames,
                       const std::vector<double>& positions,
                       const std::vector<double>& velocities,
                       const std::string& baseName,
                       const Vector3& baseOriginWRTGlobal,
                       const Quaternion& baseOrientationWRTGlobal,
                       const std::vector<double>& baseVelocityWRTGlobal,
                       const Vector3& CoMPositionWRTGlobal,
                       const Vector3& CoMVelocityWRTGlobal) :
        WirePortable(),
        jointNames(jointNames),
        positions(positions),
        velocities(velocities),
        baseName(baseName),
        baseOriginWRTGlobal(baseOriginWRTGlobal),
        baseOrientationWRTGlobal(baseOrientationWRTGlobal),
        baseVelocityWRTGlobal(baseVelocityWRTGlobal),
        CoMPositionWRTGlobal(CoMPositionWRTGlobal),
        CoMVelocityWRTGlobal(CoMVelocityWRTGlobal)
{
}

// Read structure on a Wire
bool HumanState::read(yarp::os::idl::WireReader& reader)
{
    if (!read_jointNames(reader)) {
        return false;
    }
    if (!read_positions(reader)) {
        return false;
    }
    if (!read_velocities(reader)) {
        return false;
    }
    if (!read_baseName(reader)) {
        return false;
    }
    if (!read_baseOriginWRTGlobal(reader)) {
        return false;
    }
    if (!read_baseOrientationWRTGlobal(reader)) {
        return false;
    }
    if (!read_baseVelocityWRTGlobal(reader)) {
        return false;
    }
    if (!read_CoMPositionWRTGlobal(reader)) {
        return false;
    }
    if (!read_CoMVelocityWRTGlobal(reader)) {
        return false;
    }
    if (reader.isError()) {
        return false;
    }
    return true;
}

// Read structure on a Connection
bool HumanState::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(18)) {
        return false;
    }
    if (!read(reader)) {
        return false;
    }
    return true;
}

// Write structure on a Wire
bool HumanState::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_jointNames(writer)) {
        return false;
    }
    if (!write_positions(writer)) {
        return false;
    }
    if (!write_velocities(writer)) {
        return false;
    }
    if (!write_baseName(writer)) {
        return false;
    }
    if (!write_baseOriginWRTGlobal(writer)) {
        return false;
    }
    if (!write_baseOrientationWRTGlobal(writer)) {
        return false;
    }
    if (!write_baseVelocityWRTGlobal(writer)) {
        return false;
    }
    if (!write_CoMPositionWRTGlobal(writer)) {
        return false;
    }
    if (!write_CoMVelocityWRTGlobal(writer)) {
        return false;
    }
    if (writer.isError()) {
        return false;
    }
    return true;
}

// Write structure on a Connection
bool HumanState::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(18)) {
        return false;
    }
    if (!write(writer)) {
        return false;
    }
    return true;
}

// Convert to a printable string
std::string HumanState::toString() const
{
    yarp::os::Bottle b;
    if (!yarp::os::Portable::copyPortable(*this, b)) {
        return {};
    }
    return b.toString();
}

// read jointNames field
bool HumanState::read_jointNames(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_STRING) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    jointNames.resize(_csize);
    for (size_t _i = 0; _i < _csize; ++_i) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readString(jointNames[_i])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write jointNames field
bool HumanState::write_jointNames(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_STRING, jointNames.size())) {
        return false;
    }
    for (const auto& _item : jointNames) {
        if (!writer.writeString(_item, true)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) jointNames field
bool HumanState::nested_read_jointNames(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_STRING) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    jointNames.resize(_csize);
    for (size_t _i = 0; _i < _csize; ++_i) {
        if (reader.noMore()) {
            reader.fail();
            return false;
        }
        if (!reader.readString(jointNames[_i])) {
            reader.fail();
            return false;
        }
    }
    reader.readListEnd();
    return true;
}

// write (nested) jointNames field
bool HumanState::nested_write_jointNames(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_STRING, jointNames.size())) {
        return false;
    }
    for (const auto& _item : jointNames) {
        if (!writer.writeString(_item, true)) {
            return false;
        }
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read positions field
bool HumanState::read_positions(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    positions.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(positions.data()), positions.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write positions field
bool HumanState::write_positions(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, positions.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(positions.data()), positions.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) positions field
bool HumanState::nested_read_positions(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    positions.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(positions.data()), positions.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write (nested) positions field
bool HumanState::nested_write_positions(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, positions.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(positions.data()), positions.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read velocities field
bool HumanState::read_velocities(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    velocities.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(velocities.data()), velocities.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write velocities field
bool HumanState::write_velocities(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, velocities.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(velocities.data()), velocities.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) velocities field
bool HumanState::nested_read_velocities(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    velocities.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(velocities.data()), velocities.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write (nested) velocities field
bool HumanState::nested_write_velocities(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, velocities.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(velocities.data()), velocities.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read baseName field
bool HumanState::read_baseName(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(baseName)) {
        reader.fail();
        return false;
    }
    return true;
}

// write baseName field
bool HumanState::write_baseName(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(baseName)) {
        return false;
    }
    return true;
}

// read (nested) baseName field
bool HumanState::nested_read_baseName(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(baseName)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) baseName field
bool HumanState::nested_write_baseName(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(baseName)) {
        return false;
    }
    return true;
}

// read baseOriginWRTGlobal field
bool HumanState::read_baseOriginWRTGlobal(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(baseOriginWRTGlobal)) {
        reader.fail();
        return false;
    }
    return true;
}

// write baseOriginWRTGlobal field
bool HumanState::write_baseOriginWRTGlobal(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(baseOriginWRTGlobal)) {
        return false;
    }
    return true;
}

// read (nested) baseOriginWRTGlobal field
bool HumanState::nested_read_baseOriginWRTGlobal(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(baseOriginWRTGlobal)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) baseOriginWRTGlobal field
bool HumanState::nested_write_baseOriginWRTGlobal(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(baseOriginWRTGlobal)) {
        return false;
    }
    return true;
}

// read baseOrientationWRTGlobal field
bool HumanState::read_baseOrientationWRTGlobal(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(baseOrientationWRTGlobal)) {
        reader.fail();
        return false;
    }
    return true;
}

// write baseOrientationWRTGlobal field
bool HumanState::write_baseOrientationWRTGlobal(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(baseOrientationWRTGlobal)) {
        return false;
    }
    return true;
}

// read (nested) baseOrientationWRTGlobal field
bool HumanState::nested_read_baseOrientationWRTGlobal(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(baseOrientationWRTGlobal)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) baseOrientationWRTGlobal field
bool HumanState::nested_write_baseOrientationWRTGlobal(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(baseOrientationWRTGlobal)) {
        return false;
    }
    return true;
}

// read baseVelocityWRTGlobal field
bool HumanState::read_baseVelocityWRTGlobal(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    baseVelocityWRTGlobal.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(baseVelocityWRTGlobal.data()), baseVelocityWRTGlobal.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write baseVelocityWRTGlobal field
bool HumanState::write_baseVelocityWRTGlobal(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, baseVelocityWRTGlobal.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(baseVelocityWRTGlobal.data()), baseVelocityWRTGlobal.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read (nested) baseVelocityWRTGlobal field
bool HumanState::nested_read_baseVelocityWRTGlobal(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    size_t _csize;
    yarp::os::idl::WireState _etype;
    reader.readListBegin(_etype, _csize);
    // WireReader removes BOTTLE_TAG_LIST from the tag
    constexpr int expected_tag = ((BOTTLE_TAG_FLOAT64) & (~BOTTLE_TAG_LIST));
    if constexpr (expected_tag != 0) {
        if (_csize != 0 && _etype.code != expected_tag) {
            return false;
        }
    }
    baseVelocityWRTGlobal.resize(_csize);
    if (_csize != 0 && !reader.readBlock(reinterpret_cast<char*>(baseVelocityWRTGlobal.data()), baseVelocityWRTGlobal.size() * sizeof(double))) {
        return false;
    }
    reader.readListEnd();
    return true;
}

// write (nested) baseVelocityWRTGlobal field
bool HumanState::nested_write_baseVelocityWRTGlobal(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeListBegin(BOTTLE_TAG_FLOAT64, baseVelocityWRTGlobal.size())) {
        return false;
    }
    if (!writer.writeBlock(reinterpret_cast<const char*>(baseVelocityWRTGlobal.data()), baseVelocityWRTGlobal.size() * sizeof(double))) {
        return false;
    }
    if (!writer.writeListEnd()) {
        return false;
    }
    return true;
}

// read CoMPositionWRTGlobal field
bool HumanState::read_CoMPositionWRTGlobal(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(CoMPositionWRTGlobal)) {
        reader.fail();
        return false;
    }
    return true;
}

// write CoMPositionWRTGlobal field
bool HumanState::write_CoMPositionWRTGlobal(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(CoMPositionWRTGlobal)) {
        return false;
    }
    return true;
}

// read (nested) CoMPositionWRTGlobal field
bool HumanState::nested_read_CoMPositionWRTGlobal(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(CoMPositionWRTGlobal)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) CoMPositionWRTGlobal field
bool HumanState::nested_write_CoMPositionWRTGlobal(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(CoMPositionWRTGlobal)) {
        return false;
    }
    return true;
}

// read CoMVelocityWRTGlobal field
bool HumanState::read_CoMVelocityWRTGlobal(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(CoMVelocityWRTGlobal)) {
        reader.fail();
        return false;
    }
    return true;
}

// write CoMVelocityWRTGlobal field
bool HumanState::write_CoMVelocityWRTGlobal(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(CoMVelocityWRTGlobal)) {
        return false;
    }
    return true;
}

// read (nested) CoMVelocityWRTGlobal field
bool HumanState::nested_read_CoMVelocityWRTGlobal(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(CoMVelocityWRTGlobal)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) CoMVelocityWRTGlobal field
bool HumanState::nested_write_CoMVelocityWRTGlobal(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(CoMVelocityWRTGlobal)) {
        return false;
    }
    return true;
}

} // namespace hde::msgs
