/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <hde/msgs/Transform.h>

namespace hde::msgs {

// Constructor with field values
Transform::Transform(const Vector3& position,
                     const Quaternion& orientation) :
        WirePortable(),
        position(position),
        orientation(orientation)
{
}

// Read structure on a Wire
bool Transform::read(yarp::os::idl::WireReader& reader)
{
    if (!read_position(reader)) {
        return false;
    }
    if (!read_orientation(reader)) {
        return false;
    }
    if (reader.isError()) {
        return false;
    }
    return true;
}

// Read structure on a Connection
bool Transform::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(7)) {
        return false;
    }
    if (!read(reader)) {
        return false;
    }
    return true;
}

// Write structure on a Wire
bool Transform::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_position(writer)) {
        return false;
    }
    if (!write_orientation(writer)) {
        return false;
    }
    if (writer.isError()) {
        return false;
    }
    return true;
}

// Write structure on a Connection
bool Transform::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(7)) {
        return false;
    }
    if (!write(writer)) {
        return false;
    }
    return true;
}

// Convert to a printable string
std::string Transform::toString() const
{
    yarp::os::Bottle b;
    if (!yarp::os::Portable::copyPortable(*this, b)) {
        return {};
    }
    return b.toString();
}

// read position field
bool Transform::read_position(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(position)) {
        reader.fail();
        return false;
    }
    return true;
}

// write position field
bool Transform::write_position(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(position)) {
        return false;
    }
    return true;
}

// read (nested) position field
bool Transform::nested_read_position(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(position)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) position field
bool Transform::nested_write_position(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(position)) {
        return false;
    }
    return true;
}

// read orientation field
bool Transform::read_orientation(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(orientation)) {
        reader.fail();
        return false;
    }
    return true;
}

// write orientation field
bool Transform::write_orientation(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(orientation)) {
        return false;
    }
    return true;
}

// read (nested) orientation field
bool Transform::nested_read_orientation(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(orientation)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) orientation field
bool Transform::nested_write_orientation(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(orientation)) {
        return false;
    }
    return true;
}

} // namespace hde::msgs
