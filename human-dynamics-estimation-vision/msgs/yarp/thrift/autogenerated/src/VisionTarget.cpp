/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#include <hde/msgs/VisionTarget.h>

namespace hde::msgs {

// Constructor with field values
VisionTarget::VisionTarget(const std::string& inputName,
                           const std::string& linkName,
                           const KinematicTargetType type,
                           const std::int16_t targetIdx,
                           const Vector3& position,
                           const Quaternion& orientation,
                           const Vector3& linearVelocity,
                           const Vector3& angularVelocity,
                           const Transform& calibrationWorldToMeasurementWorld,
                           const Transform& calibrationMeasurementToLink,
                           const Vector3& positionScaleFactor) :
        WirePortable(),
        inputName(inputName),
        linkName(linkName),
        type(type),
        targetIdx(targetIdx),
        position(position),
        orientation(orientation),
        linearVelocity(linearVelocity),
        angularVelocity(angularVelocity),
        calibrationWorldToMeasurementWorld(calibrationWorldToMeasurementWorld),
        calibrationMeasurementToLink(calibrationMeasurementToLink),
        positionScaleFactor(positionScaleFactor)
{
}

// Read structure on a Wire
bool VisionTarget::read(yarp::os::idl::WireReader& reader)
{
    if (!read_inputName(reader)) {
        return false;
    }
    if (!read_linkName(reader)) {
        return false;
    }
    if (!read_type(reader)) {
        return false;
    }
    if (!read_targetIdx(reader)) {
        return false;
    }
    if (!read_position(reader)) {
        return false;
    }
    if (!read_orientation(reader)) {
        return false;
    }
    if (!read_linearVelocity(reader)) {
        return false;
    }
    if (!read_angularVelocity(reader)) {
        return false;
    }
    if (!read_calibrationWorldToMeasurementWorld(reader)) {
        return false;
    }
    if (!read_calibrationMeasurementToLink(reader)) {
        return false;
    }
    if (!read_positionScaleFactor(reader)) {
        return false;
    }
    if (reader.isError()) {
        return false;
    }
    return true;
}

// Read structure on a Connection
bool VisionTarget::read(yarp::os::ConnectionReader& connection)
{
    yarp::os::idl::WireReader reader(connection);
    if (!reader.readListHeader(34)) {
        return false;
    }
    if (!read(reader)) {
        return false;
    }
    return true;
}

// Write structure on a Wire
bool VisionTarget::write(const yarp::os::idl::WireWriter& writer) const
{
    if (!write_inputName(writer)) {
        return false;
    }
    if (!write_linkName(writer)) {
        return false;
    }
    if (!write_type(writer)) {
        return false;
    }
    if (!write_targetIdx(writer)) {
        return false;
    }
    if (!write_position(writer)) {
        return false;
    }
    if (!write_orientation(writer)) {
        return false;
    }
    if (!write_linearVelocity(writer)) {
        return false;
    }
    if (!write_angularVelocity(writer)) {
        return false;
    }
    if (!write_calibrationWorldToMeasurementWorld(writer)) {
        return false;
    }
    if (!write_calibrationMeasurementToLink(writer)) {
        return false;
    }
    if (!write_positionScaleFactor(writer)) {
        return false;
    }
    if (writer.isError()) {
        return false;
    }
    return true;
}

// Write structure on a Connection
bool VisionTarget::write(yarp::os::ConnectionWriter& connection) const
{
    yarp::os::idl::WireWriter writer(connection);
    if (!writer.writeListHeader(34)) {
        return false;
    }
    if (!write(writer)) {
        return false;
    }
    return true;
}

// Convert to a printable string
std::string VisionTarget::toString() const
{
    yarp::os::Bottle b;
    if (!yarp::os::Portable::copyPortable(*this, b)) {
        return {};
    }
    return b.toString();
}

// read inputName field
bool VisionTarget::read_inputName(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(inputName)) {
        reader.fail();
        return false;
    }
    return true;
}

// write inputName field
bool VisionTarget::write_inputName(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(inputName)) {
        return false;
    }
    return true;
}

// read (nested) inputName field
bool VisionTarget::nested_read_inputName(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(inputName)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) inputName field
bool VisionTarget::nested_write_inputName(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(inputName)) {
        return false;
    }
    return true;
}

// read linkName field
bool VisionTarget::read_linkName(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(linkName)) {
        reader.fail();
        return false;
    }
    return true;
}

// write linkName field
bool VisionTarget::write_linkName(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(linkName)) {
        return false;
    }
    return true;
}

// read (nested) linkName field
bool VisionTarget::nested_read_linkName(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readString(linkName)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) linkName field
bool VisionTarget::nested_write_linkName(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeString(linkName)) {
        return false;
    }
    return true;
}

// read type field
bool VisionTarget::read_type(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    int32_t _ecast;
    if (!reader.readEnum<int32_t, KinematicTargetTypeConverter>(_ecast)) {
        reader.fail();
        return false;
    }
    type = static_cast<KinematicTargetType>(_ecast);
    return true;
}

// write type field
bool VisionTarget::write_type(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(static_cast<int32_t>(type))) {
        return false;
    }
    return true;
}

// read (nested) type field
bool VisionTarget::nested_read_type(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    int32_t _ecast;
    if (!reader.readEnum<int32_t, KinematicTargetTypeConverter>(_ecast)) {
        reader.fail();
        return false;
    }
    type = static_cast<KinematicTargetType>(_ecast);
    return true;
}

// write (nested) type field
bool VisionTarget::nested_write_type(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI32(static_cast<int32_t>(type))) {
        return false;
    }
    return true;
}

// read targetIdx field
bool VisionTarget::read_targetIdx(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI16(targetIdx)) {
        reader.fail();
        return false;
    }
    return true;
}

// write targetIdx field
bool VisionTarget::write_targetIdx(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI16(targetIdx)) {
        return false;
    }
    return true;
}

// read (nested) targetIdx field
bool VisionTarget::nested_read_targetIdx(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readI16(targetIdx)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) targetIdx field
bool VisionTarget::nested_write_targetIdx(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeI16(targetIdx)) {
        return false;
    }
    return true;
}

// read position field
bool VisionTarget::read_position(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(position)) {
        reader.fail();
        return false;
    }
    return true;
}

// write position field
bool VisionTarget::write_position(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(position)) {
        return false;
    }
    return true;
}

// read (nested) position field
bool VisionTarget::nested_read_position(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(position)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) position field
bool VisionTarget::nested_write_position(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(position)) {
        return false;
    }
    return true;
}

// read orientation field
bool VisionTarget::read_orientation(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(orientation)) {
        reader.fail();
        return false;
    }
    return true;
}

// write orientation field
bool VisionTarget::write_orientation(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(orientation)) {
        return false;
    }
    return true;
}

// read (nested) orientation field
bool VisionTarget::nested_read_orientation(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(orientation)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) orientation field
bool VisionTarget::nested_write_orientation(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(orientation)) {
        return false;
    }
    return true;
}

// read linearVelocity field
bool VisionTarget::read_linearVelocity(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(linearVelocity)) {
        reader.fail();
        return false;
    }
    return true;
}

// write linearVelocity field
bool VisionTarget::write_linearVelocity(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(linearVelocity)) {
        return false;
    }
    return true;
}

// read (nested) linearVelocity field
bool VisionTarget::nested_read_linearVelocity(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(linearVelocity)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) linearVelocity field
bool VisionTarget::nested_write_linearVelocity(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(linearVelocity)) {
        return false;
    }
    return true;
}

// read angularVelocity field
bool VisionTarget::read_angularVelocity(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(angularVelocity)) {
        reader.fail();
        return false;
    }
    return true;
}

// write angularVelocity field
bool VisionTarget::write_angularVelocity(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(angularVelocity)) {
        return false;
    }
    return true;
}

// read (nested) angularVelocity field
bool VisionTarget::nested_read_angularVelocity(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(angularVelocity)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) angularVelocity field
bool VisionTarget::nested_write_angularVelocity(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(angularVelocity)) {
        return false;
    }
    return true;
}

// read calibrationWorldToMeasurementWorld field
bool VisionTarget::read_calibrationWorldToMeasurementWorld(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(calibrationWorldToMeasurementWorld)) {
        reader.fail();
        return false;
    }
    return true;
}

// write calibrationWorldToMeasurementWorld field
bool VisionTarget::write_calibrationWorldToMeasurementWorld(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(calibrationWorldToMeasurementWorld)) {
        return false;
    }
    return true;
}

// read (nested) calibrationWorldToMeasurementWorld field
bool VisionTarget::nested_read_calibrationWorldToMeasurementWorld(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(calibrationWorldToMeasurementWorld)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) calibrationWorldToMeasurementWorld field
bool VisionTarget::nested_write_calibrationWorldToMeasurementWorld(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(calibrationWorldToMeasurementWorld)) {
        return false;
    }
    return true;
}

// read calibrationMeasurementToLink field
bool VisionTarget::read_calibrationMeasurementToLink(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(calibrationMeasurementToLink)) {
        reader.fail();
        return false;
    }
    return true;
}

// write calibrationMeasurementToLink field
bool VisionTarget::write_calibrationMeasurementToLink(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(calibrationMeasurementToLink)) {
        return false;
    }
    return true;
}

// read (nested) calibrationMeasurementToLink field
bool VisionTarget::nested_read_calibrationMeasurementToLink(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(calibrationMeasurementToLink)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) calibrationMeasurementToLink field
bool VisionTarget::nested_write_calibrationMeasurementToLink(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(calibrationMeasurementToLink)) {
        return false;
    }
    return true;
}

// read positionScaleFactor field
bool VisionTarget::read_positionScaleFactor(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.read(positionScaleFactor)) {
        reader.fail();
        return false;
    }
    return true;
}

// write positionScaleFactor field
bool VisionTarget::write_positionScaleFactor(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.write(positionScaleFactor)) {
        return false;
    }
    return true;
}

// read (nested) positionScaleFactor field
bool VisionTarget::nested_read_positionScaleFactor(yarp::os::idl::WireReader& reader)
{
    if (reader.noMore()) {
        reader.fail();
        return false;
    }
    if (!reader.readNested(positionScaleFactor)) {
        reader.fail();
        return false;
    }
    return true;
}

// write (nested) positionScaleFactor field
bool VisionTarget::nested_write_positionScaleFactor(const yarp::os::idl::WireWriter& writer) const
{
    if (!writer.writeNested(positionScaleFactor)) {
        return false;
    }
    return true;
}

} // namespace hde::msgs
