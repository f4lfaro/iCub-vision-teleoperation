/*
 * SPDX-FileCopyrightText: 2006-2021 Istituto Italiano di Tecnologia (IIT)
 * SPDX-License-Identifier: BSD-3-Clause
 */

// Autogenerated by Thrift Compiler (0.14.1-yarped)
//
// This is an automatically generated file.
// It could get re-generated if the ALLOW_IDL_GENERATION flag is on.

#ifndef YARP_THRIFT_GENERATOR_STRUCT_HUMANSTATE_H
#define YARP_THRIFT_GENERATOR_STRUCT_HUMANSTATE_H

#include <yarp/os/Wire.h>
#include <yarp/os/idl/WireTypes.h>
#include <hde/msgs/Quaternion.h>
#include <hde/msgs/Vector3.h>

namespace hde::msgs {

/**
 * Representation of the IHumanState interface
 */
class HumanState :
        public yarp::os::idl::WirePortable
{
public:
    // Fields
    std::vector<std::string> jointNames{};
    std::vector<double> positions{};
    std::vector<double> velocities{};
    std::string baseName{};
    Vector3 baseOriginWRTGlobal{};
    Quaternion baseOrientationWRTGlobal{};
    std::vector<double> baseVelocityWRTGlobal{};
    Vector3 CoMPositionWRTGlobal{};
    Vector3 CoMVelocityWRTGlobal{};

    // Default constructor
    HumanState() = default;

    // Constructor with field values
    HumanState(const std::vector<std::string>& jointNames,
               const std::vector<double>& positions,
               const std::vector<double>& velocities,
               const std::string& baseName,
               const Vector3& baseOriginWRTGlobal,
               const Quaternion& baseOrientationWRTGlobal,
               const std::vector<double>& baseVelocityWRTGlobal,
               const Vector3& CoMPositionWRTGlobal,
               const Vector3& CoMVelocityWRTGlobal);

    // Read structure on a Wire
    bool read(yarp::os::idl::WireReader& reader) override;

    // Read structure on a Connection
    bool read(yarp::os::ConnectionReader& connection) override;

    // Write structure on a Wire
    bool write(const yarp::os::idl::WireWriter& writer) const override;

    // Write structure on a Connection
    bool write(yarp::os::ConnectionWriter& connection) const override;

    // Convert to a printable string
    std::string toString() const;

    // If you want to serialize this class without nesting, use this helper
    typedef yarp::os::idl::Unwrapped<HumanState> unwrapped;

private:
    // read/write jointNames field
    bool read_jointNames(yarp::os::idl::WireReader& reader);
    bool write_jointNames(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_jointNames(yarp::os::idl::WireReader& reader);
    bool nested_write_jointNames(const yarp::os::idl::WireWriter& writer) const;

    // read/write positions field
    bool read_positions(yarp::os::idl::WireReader& reader);
    bool write_positions(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_positions(yarp::os::idl::WireReader& reader);
    bool nested_write_positions(const yarp::os::idl::WireWriter& writer) const;

    // read/write velocities field
    bool read_velocities(yarp::os::idl::WireReader& reader);
    bool write_velocities(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_velocities(yarp::os::idl::WireReader& reader);
    bool nested_write_velocities(const yarp::os::idl::WireWriter& writer) const;

    // read/write baseName field
    bool read_baseName(yarp::os::idl::WireReader& reader);
    bool write_baseName(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_baseName(yarp::os::idl::WireReader& reader);
    bool nested_write_baseName(const yarp::os::idl::WireWriter& writer) const;

    // read/write baseOriginWRTGlobal field
    bool read_baseOriginWRTGlobal(yarp::os::idl::WireReader& reader);
    bool write_baseOriginWRTGlobal(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_baseOriginWRTGlobal(yarp::os::idl::WireReader& reader);
    bool nested_write_baseOriginWRTGlobal(const yarp::os::idl::WireWriter& writer) const;

    // read/write baseOrientationWRTGlobal field
    bool read_baseOrientationWRTGlobal(yarp::os::idl::WireReader& reader);
    bool write_baseOrientationWRTGlobal(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_baseOrientationWRTGlobal(yarp::os::idl::WireReader& reader);
    bool nested_write_baseOrientationWRTGlobal(const yarp::os::idl::WireWriter& writer) const;

    // read/write baseVelocityWRTGlobal field
    bool read_baseVelocityWRTGlobal(yarp::os::idl::WireReader& reader);
    bool write_baseVelocityWRTGlobal(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_baseVelocityWRTGlobal(yarp::os::idl::WireReader& reader);
    bool nested_write_baseVelocityWRTGlobal(const yarp::os::idl::WireWriter& writer) const;

    // read/write CoMPositionWRTGlobal field
    bool read_CoMPositionWRTGlobal(yarp::os::idl::WireReader& reader);
    bool write_CoMPositionWRTGlobal(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_CoMPositionWRTGlobal(yarp::os::idl::WireReader& reader);
    bool nested_write_CoMPositionWRTGlobal(const yarp::os::idl::WireWriter& writer) const;

    // read/write CoMVelocityWRTGlobal field
    bool read_CoMVelocityWRTGlobal(yarp::os::idl::WireReader& reader);
    bool write_CoMVelocityWRTGlobal(const yarp::os::idl::WireWriter& writer) const;
    bool nested_read_CoMVelocityWRTGlobal(yarp::os::idl::WireReader& reader);
    bool nested_write_CoMVelocityWRTGlobal(const yarp::os::idl::WireWriter& writer) const;
};

} // namespace hde::msgs

#endif // YARP_THRIFT_GENERATOR_STRUCT_HUMANSTATE_H
